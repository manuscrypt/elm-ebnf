var _user$project$Main$subs = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$viewProblem = function (p) {
	var _p0 = p;
	switch (_p0.ctor) {
		case 'BadOneOf':
			return 'bad one of';
		case 'BadIgnore':
			return 'bad ignore';
		case 'BadInt':
			return 'bad int';
		case 'BadFloat':
			return 'bad float';
		case 'ExpectingEnd':
			return 'expecting end';
		case 'ExpectingSymbol':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'expected symbol \'',
				A2(_elm_lang$core$Basics_ops['++'], _p0._0, '\''));
		case 'ExpectingKeyword':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'expected keyword \'',
				A2(_elm_lang$core$Basics_ops['++'], _p0._0, '\''));
		case 'ExpectingVariable':
			return 'expected variable';
		default:
			return A2(_elm_lang$core$Basics_ops['++'], 'failed with: ', _p0._0);
	}
};
var _user$project$Main$viewError = function (err) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(err.row),
						A2(
							_elm_lang$core$Basics_ops['++'],
							'/',
							_elm_lang$core$Basics$toString(err.col))),
					A2(
						_elm_lang$core$Basics_ops['++'],
						':',
						_user$project$Main$viewProblem(err.problem)))),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$viewRhs = function (rhs) {
	var _p1 = rhs;
	switch (_p1.ctor) {
		case 'Identifier':
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						A2(_elm_lang$core$Basics_ops['++'], 'Identifier: ', _p1._0)),
					_1: {ctor: '[]'}
				});
		case 'Terminal':
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						A2(_elm_lang$core$Basics_ops['++'], 'terminal: ', _p1._0)),
					_1: {ctor: '[]'}
				});
		default:
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Not implemented: ',
							_elm_lang$core$Basics$toString(rhs))),
					_1: {ctor: '[]'}
				});
	}
};
var _user$project$Main$viewRule = function (r) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				A2(
					_elm_lang$core$Basics_ops['++'],
					r.lhs,
					A2(
						_elm_lang$core$Basics_ops['++'],
						' = ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(r.rhs),
							';')))),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$viewGrammar = function (g) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('Rules'),
			_1: A2(_elm_lang$core$List$map, _user$project$Main$viewRule, g)
		});
};
var _user$project$Main$parse = function (model) {
	var _p2 = A2(_elm_tools$parser$Parser$run, _user$project$Parsers$rule, model.input);
	if (_p2.ctor === 'Ok') {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				grammar: _elm_lang$core$Maybe$Just(
					{
						ctor: '::',
						_0: _p2._0,
						_1: {ctor: '[]'}
					}),
				err: _elm_lang$core$Maybe$Nothing
			});
	} else {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				grammar: _elm_lang$core$Maybe$Nothing,
				err: _elm_lang$core$Maybe$Just(_p2._0)
			});
	}
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p3 = A2(_elm_lang$core$Debug$log, 'msg', msg);
		return A2(
			_elm_lang$core$Platform_Cmd_ops['!'],
			_user$project$Main$parse(
				_elm_lang$core$Native_Utils.update(
					model,
					{input: _p3._0})),
			{ctor: '[]'});
	});
var _user$project$Main$Model = F3(
	function (a, b, c) {
		return {input: a, err: b, grammar: c};
	});
var _user$project$Main$init = A2(
	_elm_lang$core$Platform_Cmd_ops['!'],
	A3(_user$project$Main$Model, '', _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing),
	{ctor: '[]'});
var _user$project$Main$OnInput = function (a) {
	return {ctor: 'OnInput', _0: a};
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: A2(
						F2(
							function (v0, v1) {
								return {ctor: '_Tuple2', _0: v0, _1: v1};
							}),
						'width',
						'920px'),
					_1: {
						ctor: '::',
						_0: A2(
							F2(
								function (v0, v1) {
									return {ctor: '_Tuple2', _0: v0, _1: v1};
								}),
							'margin',
							'auto'),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$textarea,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$value(model.input),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$OnInput),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$rows(6),
							_1: {ctor: '[]'}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(model.input),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: function () {
						var _p4 = model.err;
						if (_p4.ctor === 'Nothing') {
							return _elm_lang$html$Html$text('no error');
						} else {
							return _user$project$Main$viewError(_p4._0);
						}
					}(),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$core$Maybe$withDefault,
									_elm_lang$html$Html$text('no output'),
									A2(_elm_lang$core$Maybe$map, _user$project$Main$viewGrammar, model.grammar)),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, update: _user$project$Main$update, view: _user$project$Main$view, subscriptions: _user$project$Main$subs})();
