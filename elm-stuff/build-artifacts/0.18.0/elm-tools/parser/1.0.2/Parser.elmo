var _elm_tools$parser$Parser$changeContext = F2(
	function (newContext, _p0) {
		var _p1 = _p0;
		return {source: _p1.source, offset: _p1.offset, indent: _p1.indent, context: newContext, row: _p1.row, col: _p1.col};
	});
var _elm_tools$parser$Parser$ignoreWhileHelp = F7(
	function (predicate, source, offset, indent, context, row, col) {
		ignoreWhileHelp:
		while (true) {
			var newOffset = A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, predicate, offset, source);
			if (_elm_lang$core$Native_Utils.eq(newOffset, -1)) {
				return A2(
					_elm_tools$parser$Parser_Internal$Good,
					{ctor: '_Tuple0'},
					{source: source, offset: offset, indent: indent, context: context, row: row, col: col});
			} else {
				if (_elm_lang$core$Native_Utils.eq(newOffset, -2)) {
					var _v1 = predicate,
						_v2 = source,
						_v3 = offset + 1,
						_v4 = indent,
						_v5 = context,
						_v6 = row + 1,
						_v7 = 1;
					predicate = _v1;
					source = _v2;
					offset = _v3;
					indent = _v4;
					context = _v5;
					row = _v6;
					col = _v7;
					continue ignoreWhileHelp;
				} else {
					var _v8 = predicate,
						_v9 = source,
						_v10 = newOffset,
						_v11 = indent,
						_v12 = context,
						_v13 = row,
						_v14 = col + 1;
					predicate = _v8;
					source = _v9;
					offset = _v10;
					indent = _v11;
					context = _v12;
					row = _v13;
					col = _v14;
					continue ignoreWhileHelp;
				}
			}
		}
	});
var _elm_tools$parser$Parser$ignoreWhile = function (predicate) {
	return _elm_tools$parser$Parser_Internal$Parser(
		function (_p2) {
			var _p3 = _p2;
			return A7(_elm_tools$parser$Parser$ignoreWhileHelp, predicate, _p3.source, _p3.offset, _p3.indent, _p3.context, _p3.row, _p3.col);
		});
};
var _elm_tools$parser$Parser$mapWithSource = F2(
	function (func, _p4) {
		var _p5 = _p4;
		return _elm_tools$parser$Parser_Internal$Parser(
			function (_p6) {
				var _p7 = _p6;
				var _p8 = _p5._0(_p7);
				if (_p8.ctor === 'Bad') {
					return A2(_elm_tools$parser$Parser_Internal$Bad, _p8._0, _p8._1);
				} else {
					var _p9 = _p8._1;
					var subString = A3(_elm_lang$core$String$slice, _p7.offset, _p9.offset, _p7.source);
					return A2(
						_elm_tools$parser$Parser_Internal$Good,
						A2(func, subString, _p8._0),
						_p9);
				}
			});
	});
var _elm_tools$parser$Parser$badFloatMsg = 'The `Parser.float` parser seems to have a bug.\nPlease report an SSCCE to <https://github.com/elm-tools/parser/issues>.';
var _elm_tools$parser$Parser$floatHelp = F3(
	function (offset, zeroOffset, source) {
		if (_elm_lang$core$Native_Utils.cmp(zeroOffset, 0) > -1) {
			return A2(_elm_tools$parser$Parser_Internal$chompDotAndExp, zeroOffset, source);
		} else {
			var dotOffset = A3(_elm_tools$parser$Parser_Internal$chomp, _elm_lang$core$Char$isDigit, offset, source);
			var result = A2(_elm_tools$parser$Parser_Internal$chompDotAndExp, dotOffset, source);
			var _p10 = result;
			if (_p10.ctor === 'Err') {
				return result;
			} else {
				var _p11 = _p10._0;
				return _elm_lang$core$Native_Utils.eq(_p11, offset) ? _elm_lang$core$Result$Err(_p11) : result;
			}
		}
	});
var _elm_tools$parser$Parser$badIntMsg = 'The `Parser.int` parser seems to have a bug.\nPlease report an SSCCE to <https://github.com/elm-tools/parser/issues>.';
var _elm_tools$parser$Parser$isX = function ($char) {
	return _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('x'));
};
var _elm_tools$parser$Parser$isO = function ($char) {
	return _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('o'));
};
var _elm_tools$parser$Parser$isZero = function ($char) {
	return _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('0'));
};
var _elm_tools$parser$Parser$intHelp = F3(
	function (offset, zeroOffset, source) {
		return _elm_lang$core$Native_Utils.eq(zeroOffset, -1) ? A3(_elm_tools$parser$Parser_Internal$chompDigits, _elm_lang$core$Char$isDigit, offset, source) : ((!_elm_lang$core$Native_Utils.eq(
			A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, _elm_tools$parser$Parser$isX, zeroOffset, source),
			-1)) ? A3(_elm_tools$parser$Parser_Internal$chompDigits, _elm_lang$core$Char$isHexDigit, offset + 2, source) : (_elm_lang$core$Native_Utils.eq(
			A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, _elm_tools$parser$Parser_Internal$isBadIntEnd, zeroOffset, source),
			-1) ? _elm_lang$core$Result$Ok(zeroOffset) : _elm_lang$core$Result$Err(zeroOffset)));
	});
var _elm_tools$parser$Parser$token = F2(
	function (makeProblem, str) {
		return _elm_tools$parser$Parser_Internal$Parser(
			function (_p12) {
				var _p13 = _p12;
				var _p15 = _p13.source;
				var _p14 = A5(_elm_tools$parser_primitives$ParserPrimitives$isSubString, str, _p13.offset, _p13.row, _p13.col, _p15);
				var newOffset = _p14._0;
				var newRow = _p14._1;
				var newCol = _p14._2;
				return _elm_lang$core$Native_Utils.eq(newOffset, -1) ? A2(
					_elm_tools$parser$Parser_Internal$Bad,
					makeProblem(str),
					_p13) : A2(
					_elm_tools$parser$Parser_Internal$Good,
					{ctor: '_Tuple0'},
					{source: _p15, offset: newOffset, indent: _p13.indent, context: _p13.context, row: newRow, col: newCol});
			});
	});
var _elm_tools$parser$Parser$delayedCommitMap = F3(
	function (func, _p17, _p16) {
		var _p18 = _p17;
		var _p19 = _p16;
		return _elm_tools$parser$Parser_Internal$Parser(
			function (state1) {
				var _p20 = _p18._0(state1);
				if (_p20.ctor === 'Bad') {
					return A2(_elm_tools$parser$Parser_Internal$Bad, _p20._0, state1);
				} else {
					var _p24 = _p20._1;
					var _p21 = _p19._0(_p24);
					if (_p21.ctor === 'Good') {
						return A2(
							_elm_tools$parser$Parser_Internal$Good,
							A2(func, _p20._0, _p21._0),
							_p21._1);
					} else {
						var _p23 = _p21._0;
						var _p22 = _p21._1;
						return (_elm_lang$core$Native_Utils.eq(_p24.row, _p22.row) && _elm_lang$core$Native_Utils.eq(_p24.col, _p22.col)) ? A2(_elm_tools$parser$Parser_Internal$Bad, _p23, state1) : A2(_elm_tools$parser$Parser_Internal$Bad, _p23, _p22);
					}
				}
			});
	});
var _elm_tools$parser$Parser$delayedCommit = F2(
	function (filler, realStuff) {
		return A3(
			_elm_tools$parser$Parser$delayedCommitMap,
			F2(
				function (_p25, v) {
					return v;
				}),
			filler,
			realStuff);
	});
var _elm_tools$parser$Parser$lazy = function (thunk) {
	return _elm_tools$parser$Parser_Internal$Parser(
		function (state) {
			var _p26 = thunk(
				{ctor: '_Tuple0'});
			var parse = _p26._0;
			return parse(state);
		});
};
var _elm_tools$parser$Parser$andThen = F2(
	function (callback, _p27) {
		var _p28 = _p27;
		return _elm_tools$parser$Parser_Internal$Parser(
			function (state1) {
				var _p29 = _p28._0(state1);
				if (_p29.ctor === 'Bad') {
					return A2(_elm_tools$parser$Parser_Internal$Bad, _p29._0, _p29._1);
				} else {
					var _p30 = callback(_p29._0);
					var parseB = _p30._0;
					return parseB(_p29._1);
				}
			});
	});
var _elm_tools$parser$Parser$apply = F2(
	function (f, a) {
		return f(a);
	});
var _elm_tools$parser$Parser$map2 = F3(
	function (func, _p32, _p31) {
		var _p33 = _p32;
		var _p34 = _p31;
		return _elm_tools$parser$Parser_Internal$Parser(
			function (state1) {
				var _p35 = _p33._0(state1);
				if (_p35.ctor === 'Bad') {
					return A2(_elm_tools$parser$Parser_Internal$Bad, _p35._0, _p35._1);
				} else {
					var _p36 = _p34._0(_p35._1);
					if (_p36.ctor === 'Bad') {
						return A2(_elm_tools$parser$Parser_Internal$Bad, _p36._0, _p36._1);
					} else {
						return A2(
							_elm_tools$parser$Parser_Internal$Good,
							A2(func, _p35._0, _p36._0),
							_p36._1);
					}
				}
			});
	});
var _elm_tools$parser$Parser_ops = _elm_tools$parser$Parser_ops || {};
_elm_tools$parser$Parser_ops['|='] = F2(
	function (parseFunc, parseArg) {
		return A3(_elm_tools$parser$Parser$map2, _elm_tools$parser$Parser$apply, parseFunc, parseArg);
	});
var _elm_tools$parser$Parser_ops = _elm_tools$parser$Parser_ops || {};
_elm_tools$parser$Parser_ops['|.'] = F2(
	function (keepParser, ignoreParser) {
		return A3(_elm_tools$parser$Parser$map2, _elm_lang$core$Basics$always, keepParser, ignoreParser);
	});
var _elm_tools$parser$Parser$map = F2(
	function (func, _p37) {
		var _p38 = _p37;
		return _elm_tools$parser$Parser_Internal$Parser(
			function (state1) {
				var _p39 = _p38._0(state1);
				if (_p39.ctor === 'Good') {
					return A2(
						_elm_tools$parser$Parser_Internal$Good,
						func(_p39._0),
						_p39._1);
				} else {
					return A2(_elm_tools$parser$Parser_Internal$Bad, _p39._0, _p39._1);
				}
			});
	});
var _elm_tools$parser$Parser$succeed = function (a) {
	return _elm_tools$parser$Parser_Internal$Parser(
		function (state) {
			return A2(_elm_tools$parser$Parser_Internal$Good, a, state);
		});
};
var _elm_tools$parser$Parser$run = F2(
	function (_p40, source) {
		var _p41 = _p40;
		var initialState = {
			source: source,
			offset: 0,
			indent: 1,
			context: {ctor: '[]'},
			row: 1,
			col: 1
		};
		var _p42 = _p41._0(initialState);
		if (_p42.ctor === 'Good') {
			return _elm_lang$core$Result$Ok(_p42._0);
		} else {
			return _elm_lang$core$Result$Err(
				{row: _p42._1.row, col: _p42._1.col, source: source, problem: _p42._0, context: _p42._1.context});
		}
	});
var _elm_tools$parser$Parser$Error = F5(
	function (a, b, c, d, e) {
		return {row: a, col: b, source: c, problem: d, context: e};
	});
var _elm_tools$parser$Parser$Context = F3(
	function (a, b, c) {
		return {row: a, col: b, description: c};
	});
var _elm_tools$parser$Parser$inContext = F2(
	function (ctx, _p43) {
		var _p44 = _p43;
		return _elm_tools$parser$Parser_Internal$Parser(
			function (_p45) {
				var _p46 = _p45;
				var _p48 = _p46.context;
				var state1 = A2(
					_elm_tools$parser$Parser$changeContext,
					{
						ctor: '::',
						_0: A3(_elm_tools$parser$Parser$Context, _p46.row, _p46.col, ctx),
						_1: _p48
					},
					_p46);
				var _p47 = _p44._0(state1);
				if (_p47.ctor === 'Good') {
					return A2(
						_elm_tools$parser$Parser_Internal$Good,
						_p47._0,
						A2(_elm_tools$parser$Parser$changeContext, _p48, _p47._1));
				} else {
					return _p47;
				}
			});
	});
var _elm_tools$parser$Parser$Fail = function (a) {
	return {ctor: 'Fail', _0: a};
};
var _elm_tools$parser$Parser$fail = function (message) {
	return _elm_tools$parser$Parser_Internal$Parser(
		function (state) {
			return A2(
				_elm_tools$parser$Parser_Internal$Bad,
				_elm_tools$parser$Parser$Fail(message),
				state);
		});
};
var _elm_tools$parser$Parser$ExpectingVariable = {ctor: 'ExpectingVariable'};
var _elm_tools$parser$Parser$ExpectingKeyword = function (a) {
	return {ctor: 'ExpectingKeyword', _0: a};
};
var _elm_tools$parser$Parser$keyword = function (str) {
	return A2(_elm_tools$parser$Parser$token, _elm_tools$parser$Parser$ExpectingKeyword, str);
};
var _elm_tools$parser$Parser$ExpectingSymbol = function (a) {
	return {ctor: 'ExpectingSymbol', _0: a};
};
var _elm_tools$parser$Parser$symbol = function (str) {
	return A2(_elm_tools$parser$Parser$token, _elm_tools$parser$Parser$ExpectingSymbol, str);
};
var _elm_tools$parser$Parser$ExpectingEnd = {ctor: 'ExpectingEnd'};
var _elm_tools$parser$Parser$end = _elm_tools$parser$Parser_Internal$Parser(
	function (state) {
		return _elm_lang$core$Native_Utils.eq(
			_elm_lang$core$String$length(state.source),
			state.offset) ? A2(
			_elm_tools$parser$Parser_Internal$Good,
			{ctor: '_Tuple0'},
			state) : A2(_elm_tools$parser$Parser_Internal$Bad, _elm_tools$parser$Parser$ExpectingEnd, state);
	});
var _elm_tools$parser$Parser$BadFloat = {ctor: 'BadFloat'};
var _elm_tools$parser$Parser$float = _elm_tools$parser$Parser_Internal$Parser(
	function (_p49) {
		var _p50 = _p49;
		var _p61 = _p50.source;
		var _p60 = _p50.row;
		var _p59 = _p50.offset;
		var _p58 = _p50.indent;
		var _p57 = _p50.context;
		var _p56 = _p50.col;
		var _p51 = A3(
			_elm_tools$parser$Parser$floatHelp,
			_p59,
			A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, _elm_tools$parser$Parser$isZero, _p59, _p61),
			_p61);
		if (_p51.ctor === 'Err') {
			var _p52 = _p51._0;
			return A2(
				_elm_tools$parser$Parser_Internal$Bad,
				_elm_tools$parser$Parser$BadFloat,
				{source: _p61, offset: _p52, indent: _p58, context: _p57, row: _p60, col: _p56 + (_p52 - _p59)});
		} else {
			var _p55 = _p51._0;
			var _p53 = _elm_lang$core$String$toFloat(
				A3(_elm_lang$core$String$slice, _p59, _p55, _p61));
			if (_p53.ctor === 'Err') {
				return _elm_lang$core$Native_Utils.crashCase(
					'Parser',
					{
						start: {line: 691, column: 9},
						end: {line: 703, column: 16}
					},
					_p53)(_elm_tools$parser$Parser$badFloatMsg);
			} else {
				return A2(
					_elm_tools$parser$Parser_Internal$Good,
					_p53._0,
					{source: _p61, offset: _p55, indent: _p58, context: _p57, row: _p60, col: _p56 + (_p55 - _p59)});
			}
		}
	});
var _elm_tools$parser$Parser$BadInt = {ctor: 'BadInt'};
var _elm_tools$parser$Parser$int = _elm_tools$parser$Parser_Internal$Parser(
	function (_p62) {
		var _p63 = _p62;
		var _p74 = _p63.source;
		var _p73 = _p63.row;
		var _p72 = _p63.offset;
		var _p71 = _p63.indent;
		var _p70 = _p63.context;
		var _p69 = _p63.col;
		var _p64 = A3(
			_elm_tools$parser$Parser$intHelp,
			_p72,
			A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, _elm_tools$parser$Parser$isZero, _p72, _p74),
			_p74);
		if (_p64.ctor === 'Err') {
			var _p65 = _p64._0;
			return A2(
				_elm_tools$parser$Parser_Internal$Bad,
				_elm_tools$parser$Parser$BadInt,
				{source: _p74, offset: _p65, indent: _p71, context: _p70, row: _p73, col: _p69 + (_p65 - _p72)});
		} else {
			var _p68 = _p64._0;
			var _p66 = _elm_lang$core$String$toInt(
				A3(_elm_lang$core$String$slice, _p72, _p68, _p74));
			if (_p66.ctor === 'Err') {
				return _elm_lang$core$Native_Utils.crashCase(
					'Parser',
					{
						start: {line: 596, column: 9},
						end: {line: 608, column: 16}
					},
					_p66)(_elm_tools$parser$Parser$badIntMsg);
			} else {
				return A2(
					_elm_tools$parser$Parser_Internal$Good,
					_p66._0,
					{source: _p74, offset: _p68, indent: _p71, context: _p70, row: _p73, col: _p69 + (_p68 - _p72)});
			}
		}
	});
var _elm_tools$parser$Parser$BadIgnore = {ctor: 'BadIgnore'};
var _elm_tools$parser$Parser$ignoreHelp = F8(
	function (n, predicate, source, offset, indent, context, row, col) {
		ignoreHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return A2(
					_elm_tools$parser$Parser_Internal$Good,
					{ctor: '_Tuple0'},
					{source: source, offset: offset, indent: indent, context: context, row: row, col: col});
			} else {
				var newOffset = A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, predicate, offset, source);
				if (_elm_lang$core$Native_Utils.eq(newOffset, -1)) {
					return A2(
						_elm_tools$parser$Parser_Internal$Bad,
						_elm_tools$parser$Parser$BadIgnore,
						{source: source, offset: offset, indent: indent, context: context, row: row, col: col});
				} else {
					if (_elm_lang$core$Native_Utils.eq(newOffset, -2)) {
						var _v44 = n - 1,
							_v45 = predicate,
							_v46 = source,
							_v47 = offset + 1,
							_v48 = indent,
							_v49 = context,
							_v50 = row + 1,
							_v51 = 1;
						n = _v44;
						predicate = _v45;
						source = _v46;
						offset = _v47;
						indent = _v48;
						context = _v49;
						row = _v50;
						col = _v51;
						continue ignoreHelp;
					} else {
						var _v52 = n - 1,
							_v53 = predicate,
							_v54 = source,
							_v55 = newOffset,
							_v56 = indent,
							_v57 = context,
							_v58 = row,
							_v59 = col + 1;
						n = _v52;
						predicate = _v53;
						source = _v54;
						offset = _v55;
						indent = _v56;
						context = _v57;
						row = _v58;
						col = _v59;
						continue ignoreHelp;
					}
				}
			}
		}
	});
var _elm_tools$parser$Parser$ignore = F2(
	function (n, predicate) {
		return _elm_tools$parser$Parser_Internal$Parser(
			function (_p75) {
				var _p76 = _p75;
				return A8(_elm_tools$parser$Parser$ignoreHelp, n, predicate, _p76.source, _p76.offset, _p76.indent, _p76.context, _p76.row, _p76.col);
			});
	});
var _elm_tools$parser$Parser$ignoreUntil = F2(
	function (before, str) {
		return _elm_tools$parser$Parser_Internal$Parser(
			function (_p77) {
				var _p78 = _p77;
				var _p80 = _p78.source;
				var _p79 = A6(_elm_tools$parser_primitives$ParserPrimitives$findSubString, before, str, _p78.offset, _p78.row, _p78.col, _p80);
				var newOffset = _p79._0;
				var newRow = _p79._1;
				var newCol = _p79._2;
				return _elm_lang$core$Native_Utils.eq(newOffset, -1) ? A2(_elm_tools$parser$Parser_Internal$Bad, _elm_tools$parser$Parser$BadIgnore, _p78) : A2(
					_elm_tools$parser$Parser_Internal$Good,
					{ctor: '_Tuple0'},
					{source: _p80, offset: newOffset, indent: _p78.indent, context: _p78.context, row: newRow, col: newCol});
			});
	});
var _elm_tools$parser$Parser$ignoreUntilAfter = function (str) {
	return A2(_elm_tools$parser$Parser$ignoreUntil, false, str);
};
var _elm_tools$parser$Parser$ignoreUntilBefore = function (str) {
	return A2(_elm_tools$parser$Parser$ignoreUntil, true, str);
};
var _elm_tools$parser$Parser$BadOneOf = function (a) {
	return {ctor: 'BadOneOf', _0: a};
};
var _elm_tools$parser$Parser$oneOfHelp = F3(
	function (state, problems, parsers) {
		oneOfHelp:
		while (true) {
			var _p81 = parsers;
			if (_p81.ctor === '[]') {
				return A2(
					_elm_tools$parser$Parser_Internal$Bad,
					_elm_tools$parser$Parser$BadOneOf(
						_elm_lang$core$List$reverse(problems)),
					state);
			} else {
				var _p82 = _p81._0._0(state);
				if (_p82.ctor === 'Good') {
					return _p82;
				} else {
					if (_elm_lang$core$Native_Utils.eq(state.row, _p82._1.row) && _elm_lang$core$Native_Utils.eq(state.col, _p82._1.col)) {
						var _v64 = state,
							_v65 = {ctor: '::', _0: _p82._0, _1: problems},
							_v66 = _p81._1;
						state = _v64;
						problems = _v65;
						parsers = _v66;
						continue oneOfHelp;
					} else {
						return _p82;
					}
				}
			}
		}
	});
var _elm_tools$parser$Parser$oneOf = function (parsers) {
	return _elm_tools$parser$Parser_Internal$Parser(
		function (state) {
			return A3(
				_elm_tools$parser$Parser$oneOfHelp,
				state,
				{ctor: '[]'},
				parsers);
		});
};
var _elm_tools$parser$Parser$zeroOrMoreHelp = F2(
	function (parser, revValues) {
		return _elm_tools$parser$Parser$oneOf(
			{
				ctor: '::',
				_0: A2(
					_elm_tools$parser$Parser$andThen,
					function (value) {
						return A2(
							_elm_tools$parser$Parser$zeroOrMoreHelp,
							parser,
							{ctor: '::', _0: value, _1: revValues});
					},
					parser),
				_1: {
					ctor: '::',
					_0: _elm_tools$parser$Parser$succeed(
						_elm_lang$core$List$reverse(revValues)),
					_1: {ctor: '[]'}
				}
			});
	});
var _elm_tools$parser$Parser$zeroOrMore = function (parser) {
	return A2(
		_elm_tools$parser$Parser$zeroOrMoreHelp,
		parser,
		{ctor: '[]'});
};
